@model JiraApp.ViewModels.Board.BoardViewModel

@{
    ViewData["Title"] = "Developer Boards";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.css" />

<style>
    /* Board styles */
    .board-column {
        min-height: 300px;
    }
    
    .board-column-header {
        padding: 10px;
        font-weight: 600;
        font-size: 0.8rem;
    }
    
    .task-card {
        cursor: pointer;
        transition: all 0.2s ease;
        border-left: 3px solid #3498db;
        position: relative;
    }
    
    .task-card:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }
    
    .task-card.dragging {
        opacity: 0.5;
        transform: scale(0.95);
    }
    
    .task-container {
        min-height: 100px;
        padding: 8px;
        border-radius: 4px;
        background-color: #f8f9fa;
        transition: background-color 0.2s ease;
    }
    
    .task-container.drag-over {
        background-color: #e9ecef;
        border: 2px dashed #6c757d;
    }
    
    .avatar {
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        font-weight: bold;
    }
    
    .user-section {
        margin-bottom: 15px;
        border: 1px solid #eee;
        border-radius: 5px;
        overflow: hidden;
    }
    
    .user-header {
        display: flex;
        align-items: center;
        padding: 8px 10px;
        background-color: #f8f9fa;
        cursor: pointer;
    }
    
    .cursor-pointer {
        cursor: pointer;
    }
    
    .tasks-container {
        padding: 10px;
    }
    
    .badge {
        font-size: 0.75rem;
    }
    
    .status-todo {
        background-color: #0d6efd;
        color: white;
    }
    
    .status-progress {
        background-color: #ffc107;
        color: white;
    }
    
    .status-done {
        background-color: #198754;
        color: white;
    }
    
    .column-badge {
        font-size: 0.8rem;
        padding: 3px 8px;
        border-radius: 10px;
    }
    
    #createProjectBtn {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
    }
    
    .bi-chevron-down {
        transition: transform 0.3s;
    }
    
    .collapsed .bi-chevron-down {
        transform: rotate(-90deg);
    }
    
    .user-list-section {
        margin-bottom: 30px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }
    
    .user-list-header {
        background-color: #f8f9fa;
        padding: 15px;
        border-bottom: 1px solid #eee;
        border-radius: 8px 8px 0 0;
    }
    
    .user-list-content {
        padding: 0;
    }
    
    .user-list-item {
        border-bottom: 1px solid #eee;
        transition: all 0.2s;
    }
    
    .user-list-item:last-child {
        border-bottom: none;
    }
    
    .user-list-item:hover {
        background-color: #f8f9fa;
    }
    
    .task-status-badge {
        min-width: 80px;
        text-align: center;
    }
    
    .task-detail-link {
        color: inherit;
        text-decoration: none;
    }
    
    .task-detail-link:hover {
        color: #0d6efd;
    }
</style>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-md-6">
            <h2 class="mb-0">Dev board</h2>
        </div>
        <div class="col-md-6 text-end">
            <button id="createTaskBtn" class="btn btn-primary me-2"><i class="bi bi-plus-circle"></i> Create Task</button>
            <button id="createProjectBtn" class="btn btn-success"><i class="bi bi-plus-circle"></i> Create Project</button>
        </div>
    </div>
    
 
                
                <!-- Unassigned Tasks -->
                @{
                    var unassignedTasks = Model.Tasks.Where(t => t.AssigneeId == null).ToList();
                    var unassignedTodoCount = unassignedTasks.Count(t => t.Status == JiraApp.Models.Tasks.TaskStatusEnum.ToDo);
                    var unassignedInProgressCount = unassignedTasks.Count(t => t.Status == JiraApp.Models.Tasks.TaskStatusEnum.InProgress);
                    var unassignedDoneCount = unassignedTasks.Count(t => t.Status == JiraApp.Models.Tasks.TaskStatusEnum.Done);
                }
                
                
                    

    <!-- Tabs -->
    <div class="mb-3">
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link active" href="#"><i class="bi bi-kanban"></i> Active sprints</a>
            </li>
        </ul>
    </div>

    <!-- Task Board -->
    <div class="row mb-3">
        <!-- Column Headers -->
        <div class="col-md-4">
            <div class="card bg-light">
                <div class="card-body py-2">
                    <h5 class="mb-0 text-uppercase">SELECTED FOR DEVELOPMENT <span class="badge bg-secondary">@Model.Tasks.Count(t => t.Status == JiraApp.Models.Tasks.TaskStatusEnum.ToDo)</span></h5>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-light">
                <div class="card-body py-2">
                    <h5 class="mb-0 text-uppercase">IN DEVELOPMENT <span class="badge bg-secondary">@Model.Tasks.Count(t => t.Status == JiraApp.Models.Tasks.TaskStatusEnum.InProgress)</span></h5>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-light">
                <div class="card-body py-2">
                    <h5 class="mb-0 text-uppercase">BLOCKED <span class="badge bg-secondary">@Model.Tasks.Count(t => t.Status == JiraApp.Models.Tasks.TaskStatusEnum.Done)</span></h5>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Task Board Content -->
    <div class="row">
        <div class="col-12">
            <div class="accordion" id="taskBoardAccordion">
                @foreach (var user in Model.Users)
                {
                    var userTasks = Model.Tasks.Where(t => t.AssigneeId == user.Id).ToList();
                    var todoTasks = userTasks.Where(t => t.Status == JiraApp.Models.Tasks.TaskStatusEnum.ToDo).ToList();
                    var inProgressTasks = userTasks.Where(t => t.Status == JiraApp.Models.Tasks.TaskStatusEnum.InProgress).ToList();
                    var doneTasks = userTasks.Where(t => t.Status == JiraApp.Models.Tasks.TaskStatusEnum.Done).ToList();
                    
                    <div class="accordion-item mb-2">
                        <h2 class="accordion-header" id="heading-@user.Id">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@user.Id" aria-expanded="false" aria-controls="collapse-@user.Id">
                                <div class="d-flex align-items-center w-100">
                                    <div class="avatar bg-primary text-white me-3">
                                        @user.Username.Substring(0, 1).ToUpper()
                                    </div>
                                    <div>
                                        <span class="fw-bold">@user.Username</span>
                                    </div>
                                    <div class="ms-auto">
                                        <span class="badge bg-secondary me-2">@userTasks.Count() tasks</span>
                                        <span class="badge bg-primary me-2">@todoTasks.Count() to do</span>
                                        <span class="badge bg-warning me-2">@inProgressTasks.Count() in progress</span>
                                        <span class="badge bg-success">@doneTasks.Count() done</span>
                                    </div>
                                </div>
                            </button>
                        </h2>
                        <div id="collapse-@user.Id" class="accordion-collapse collapse" aria-labelledby="heading-@user.Id" data-bs-parent="#taskBoardAccordion">
                            <div class="accordion-body p-0">
                                <div class="row">
                                    <!-- Selected for Development -->
                                    <div class="col-md-4">
                                        <div class="p-2">
                                            <h6 class="mb-2 text-muted">Selected for Development</h6>
                                            <div class="task-container" data-status="0">
                                                @if (todoTasks.Any())
                                                {
                                                    foreach (var task in todoTasks)
                                                    {
                                                        <div class="card mb-2 task-card view-task-details" data-task-id="@task.Id" draggable="true">
                                                            <div class="card-body p-2">
                                                                <h6 class="card-title mb-1">@task.Title</h6>
                                                                <div class="d-flex justify-content-between align-items-center mt-2">
                                                                    <span class="badge @(task.Priority == JiraApp.Models.Tasks.Priority.High ? "bg-danger" : task.Priority == JiraApp.Models.Tasks.Priority.Medium ? "bg-warning" : "bg-info")">@task.Priority</span>
                                                                    <small>@(task.Project?.Name ?? "No Project")</small>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                                else
                                                {
                                                    <div class="text-center py-3 text-muted empty-container">No tasks</div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- In Development -->
                                    <div class="col-md-4">
                                        <div class="p-2">
                                            <h6 class="mb-2 text-muted">In Development</h6>
                                            <div class="task-container" data-status="1">
                                                @if (inProgressTasks.Any())
                                                {
                                                    foreach (var task in inProgressTasks)
                                                    {
                                                        <div class="card mb-2 task-card view-task-details" data-task-id="@task.Id" draggable="true">
                                                            <div class="card-body p-2">
                                                                <h6 class="card-title mb-1">@task.Title</h6>
                                                                <div class="d-flex justify-content-between align-items-center mt-2">
                                                                    <span class="badge @(task.Priority == JiraApp.Models.Tasks.Priority.High ? "bg-danger" : task.Priority == JiraApp.Models.Tasks.Priority.Medium ? "bg-warning" : "bg-info")">@task.Priority</span>
                                                                    <small>@(task.Project?.Name ?? "No Project")</small>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                                else
                                                {
                                                    <div class="text-center py-3 text-muted empty-container">No tasks</div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Blocked -->
                                    <div class="col-md-4">
                                        <div class="p-2">
                                            <h6 class="mb-2 text-muted">Blocked</h6>
                                            <div class="task-container" data-status="2">
                                                @if (doneTasks.Any())
                                                {
                                                    foreach (var task in doneTasks)
                                                    {
                                                        <div class="card mb-2 task-card view-task-details" data-task-id="@task.Id" draggable="true">
                                                            <div class="card-body p-2">
                                                                <h6 class="card-title mb-1">@task.Title</h6>
                                                                <div class="d-flex justify-content-between align-items-center mt-2">
                                                                    <span class="badge @(task.Priority == JiraApp.Models.Tasks.Priority.High ? "bg-danger" : task.Priority == JiraApp.Models.Tasks.Priority.Medium ? "bg-warning" : "bg-info")">@task.Priority</span>
                                                                    <small>@(task.Project?.Name ?? "No Project")</small>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                                else
                                                {
                                                    <div class="text-center py-3 text-muted">No tasks</div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                
                <!-- Unassigned Tasks -->
                @{
                    var unassignedTasksa = Model.Tasks.Where(t => t.AssigneeId == null).ToList();
                    var unassignedTodoTasks = unassignedTasks.Where(t => t.Status == JiraApp.Models.Tasks.TaskStatusEnum.ToDo).ToList();
                    var unassignedInProgressTasks = unassignedTasks.Where(t => t.Status == JiraApp.Models.Tasks.TaskStatusEnum.InProgress).ToList();
                    var unassignedDoneTasks = unassignedTasks.Where(t => t.Status == JiraApp.Models.Tasks.TaskStatusEnum.Done).ToList();
                }
                
                <div class="accordion-item mb-2">
                    <h2 class="accordion-header" id="heading-unassigned">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-unassigned" aria-expanded="false" aria-controls="collapse-unassigned">
                            <div class="d-flex align-items-center w-100">
                                <div class="avatar bg-secondary text-white me-3">
                                    U
                                </div>
                                <div>
                                    <span class="fw-bold">Unassigned Tasks</span>
                                </div>
                                <div class="ms-auto">
                                    <span class="badge bg-secondary me-2">@unassignedTasks.Count() tasks</span>
                                    <span class="badge bg-primary me-2">@unassignedTodoTasks.Count() to do</span>
                                    <span class="badge bg-warning me-2">@unassignedInProgressTasks.Count() in progress</span>
                                    <span class="badge bg-success">@unassignedDoneTasks.Count() done</span>
                                </div>
                            </div>
                        </button>
                    </h2>
                    <div id="collapse-unassigned" class="accordion-collapse collapse" aria-labelledby="heading-unassigned" data-bs-parent="#taskBoardAccordion">
                        <div class="accordion-body p-0">
                            <div class="row">
                                <!-- Selected for Development -->
                                <div class="col-md-4">
                                    <div class="p-2">
                                        <h6 class="mb-2 text-muted">Selected for Development</h6>
                                        <div class="task-container" data-status="0">
                                            @if (unassignedTodoTasks.Any())
                                            {
                                                foreach (var task in unassignedTodoTasks)
                                                {
                                                    <div class="card mb-2 task-card view-task-details" data-task-id="@task.Id" draggable="true">
                                                        <div class="card-body p-2">
                                                            <h6 class="card-title mb-1">@task.Title</h6>
                                                            <div class="d-flex justify-content-between align-items-center mt-2">
                                                                <span class="badge @(task.Priority == JiraApp.Models.Tasks.Priority.High ? "bg-danger" : task.Priority == JiraApp.Models.Tasks.Priority.Medium ? "bg-warning" : "bg-info")">@task.Priority</span>
                                                                <small>@(task.Project?.Name ?? "No Project")</small>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                <div class="text-center py-3 text-muted empty-container">No tasks</div>
                                            }
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- In Development -->
                                <div class="col-md-4">
                                    <div class="p-2">
                                        <h6 class="mb-2 text-muted">In Development</h6>
                                        <div class="task-container" data-status="1">
                                            @if (unassignedInProgressTasks.Any())
                                            {
                                                foreach (var task in unassignedInProgressTasks)
                                                {
                                                    <div class="card mb-2 task-card view-task-details" data-task-id="@task.Id" draggable="true">
                                                        <div class="card-body p-2">
                                                            <h6 class="card-title mb-1">@task.Title</h6>
                                                            <div class="d-flex justify-content-between align-items-center mt-2">
                                                                <span class="badge @(task.Priority == JiraApp.Models.Tasks.Priority.High ? "bg-danger" : task.Priority == JiraApp.Models.Tasks.Priority.Medium ? "bg-warning" : "bg-info")">@task.Priority</span>
                                                                <small>@(task.Project?.Name ?? "No Project")</small>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                <div class="text-center py-3 text-muted empty-container">No tasks</div>
                                            }
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Blocked -->
                                <div class="col-md-4">
                                    <div class="p-2">
                                        <h6 class="mb-2 text-muted">Blocked</h6>
                                        <div class="task-container" data-status="2">
                                            @if (unassignedDoneTasks.Any())
                                            {
                                                foreach (var task in unassignedDoneTasks)
                                                {
                                                    <div class="card mb-2 task-card view-task-details" data-task-id="@task.Id" draggable="true">
                                                        <div class="card-body p-2">
                                                            <h6 class="card-title mb-1">@task.Title</h6>
                                                            <div class="d-flex justify-content-between align-items-center mt-2">
                                                                <span class="badge @(task.Priority == JiraApp.Models.Tasks.Priority.High ? "bg-danger" : task.Priority == JiraApp.Models.Tasks.Priority.Medium ? "bg-warning" : "bg-info")">@task.Priority</span>
                                                                <small>@(task.Project?.Name ?? "No Project")</small>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                <div class="text-center py-3 text-muted empty-container">No tasks</div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Task Details Modal -->
<div class="modal fade" id="taskDetailsModal" tabindex="-1" aria-labelledby="taskDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" id="taskDetailsContent">
            <!-- Content will be loaded dynamically -->
        </div>
    </div>
</div>

<!-- Create Task Modal -->
<div class="modal fade" id="createTaskModal" tabindex="-1" aria-labelledby="createTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" id="createTaskContent">
            <!-- Content will be loaded dynamically -->
        </div>
    </div>
</div>

<!-- Create Project Modal -->
<div class="modal fade" id="createProjectModal" tabindex="-1" aria-labelledby="createProjectModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" id="createProjectContent">
            <!-- Content will be loaded dynamically -->
        </div>
    </div>
</div>

<!-- Status Update Toast -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 5">
    <div id="statusAlert" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-success text-white">
            <strong class="me-auto">Success</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            Task status updated successfully!
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize drag and drop functionality
            initDragAndDrop();
            
            function initDragAndDrop() {
                // Get all draggable task cards
                const draggableCards = document.querySelectorAll('.task-card[draggable="true"]');
                const dropContainers = document.querySelectorAll('.task-container');
                
                // Add event listeners to draggable cards
                draggableCards.forEach(card => {
                    card.addEventListener('dragstart', handleDragStart);
                    card.addEventListener('dragend', handleDragEnd);
                    
                    // Prevent click event from firing when dragging ends
                    let isDragging = false;
                    card.addEventListener('mousedown', () => {
                        isDragging = false;
                    });
                    card.addEventListener('mousemove', () => {
                        isDragging = true;
                    });
                    card.addEventListener('click', (e) => {
                        if (isDragging) {
                            e.stopPropagation();
                            e.preventDefault();
                        }
                    });
                });
                
                // Add event listeners to drop containers
                dropContainers.forEach(container => {
                    container.addEventListener('dragover', handleDragOver);
                    container.addEventListener('dragenter', handleDragEnter);
                    container.addEventListener('dragleave', handleDragLeave);
                    container.addEventListener('drop', handleDrop);
                });
            }
            
            // Drag event handlers
            function handleDragStart(e) {
                this.classList.add('dragging');
                e.dataTransfer.setData('text/plain', this.getAttribute('data-task-id'));
                e.dataTransfer.effectAllowed = 'move';
            }
            
            function handleDragEnd() {
                this.classList.remove('dragging');
            }
            
            function handleDragOver(e) {
                e.preventDefault();
                e.dataTransfer.dropEffect = 'move';
                return false;
            }
            
            function handleDragEnter(e) {
                this.classList.add('drag-over');
            }
            
            function handleDragLeave(e) {
                this.classList.remove('drag-over');
            }
            
            function handleDrop(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // Remove drag-over class
                this.classList.remove('drag-over');
                
                // Get task ID and new status
                const taskId = e.dataTransfer.getData('text/plain');
                const newStatus = this.getAttribute('data-status');
                
                // Get the task card element
                const taskCard = document.querySelector(`.task-card[data-task-id="${taskId}"]`);
                
                if (taskCard) {
                    // Move the card to the new container
                    this.appendChild(taskCard);
                    
                    // Update task status via AJAX
                    updateTaskStatus(taskId, newStatus);
                    
                    // Remove empty container message if it exists
                    const emptyContainer = this.querySelector('.empty-container');
                    if (emptyContainer) {
                        emptyContainer.remove();
                    }
                    
                    // Check if the source container is now empty
                    const sourceContainer = document.querySelector(`.task-container:not([data-status="${newStatus}"]) .task-card`);
                    if (!sourceContainer) {
                        // Add empty container message to source container
                        const sourceContainers = document.querySelectorAll(`.task-container:not([data-status="${newStatus}"])`);
                        sourceContainers.forEach(container => {
                            if (container.querySelectorAll('.task-card').length === 0 && 
                                container.querySelectorAll('.empty-container').length === 0) {
                                container.innerHTML += '<div class="text-center py-3 text-muted empty-container">No tasks</div>';
                            }
                        });
                    }
                }
                
                return false;
            }
            
            // Function to update task status via AJAX
            function updateTaskStatus(taskId, newStatus) {
                $.ajax({
                    url: '@(Url.Action("ChangeTaskStatus", "Board"))',
                    type: 'POST',
                    data: { taskId: taskId, newStatus: newStatus },
                    success: function(response) {
                        if (response.success) {
                            // Show success toast
                            $('#statusAlert').toast('show');
                        } else {
                            // Show error message
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.message || 'Failed to update task status'
                            }).then(function() {
                                // Reload the page to restore original state
                                location.reload();
                            });
                        }
                    },
                    error: function() {
                        // Show error message
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while updating the task status'
                        }).then(function() {
                            // Reload the page to restore original state
                            location.reload();
                        });
                    }
                });
            }
            // Handle task card click to view details
            $(document).on('click', '.view-task-details', function() {
                var taskId = $(this).data('task-id');
                
                // Show loading state
                $('#taskDetailsContent').html('<div class="d-flex justify-content-center p-5"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>');
                $('#taskDetailsModal').modal('show');
                
                // Load task details
                $.ajax({
                    url: '@(Url.Action("GetTaskDetails", "Board"))',
                    type: 'GET',
                    data: { id: taskId },
                    success: function(result) {
                        $('#taskDetailsContent').html(result);
                        
                        // Initialize the save changes button handler
                        $('#saveTaskChanges').on('click', function() {
                            // Create a FormData object to handle file uploads
                            var formData = new FormData($('#taskEditForm')[0]);
                            
                            // Show loading state
                            $(this).prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...');
                            
                            $.ajax({
                                url: '@(Url.Action("UpdateTask", "Board"))',
                                type: 'POST',
                                data: formData,
                                processData: false,  // Don't process the data
                                contentType: false,  // Don't set content type
                                success: function(response) {
                                    if (response.success) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Success',
                                            text: 'Task updated successfully!',
                                            showConfirmButton: false,
                                            timer: 1500
                                        }).then(function() {
                                            // Close the modal and refresh the page
                                            $('#taskDetailsModal').modal('hide');
                                            location.reload();
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error',
                                            text: response.message || 'Failed to update task. Please try again.'
                                        });
                                        $('#saveTaskChanges').prop('disabled', false).text('Save Changes');
                                    }
                                },
                                error: function() {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'An error occurred while updating the task. Please try again.'
                                    });
                                    $('#saveTaskChanges').prop('disabled', false).text('Save Changes');
                                }
                            });
                        });
                    },
                    error: function() {
                        $('#taskDetailsContent').html('<div class="modal-header"><h5 class="modal-title">Error</h5><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button></div><div class="modal-body"><p class="text-danger">Failed to load task details. Please try again.</p></div>');
                    }
                });
            });
            
            // Handle task status change
            $(document).on('click', '.change-status', function(e) {
                e.preventDefault();
                
                var taskId = $(this).data('task-id');
                var newStatus = $(this).data('status');
                var taskCard = $(this).closest('.task-card');
                
                // Show loading indicator
                taskCard.addClass('bg-light');
                
                $.ajax({
                    url: '@(Url.Action("ChangeTaskStatus", "Board"))',
                    type: 'POST',
                    data: {
                        taskId: taskId,
                        newStatus: newStatus
                    },
                    success: function(response) {
                        if (response.success) {
                            // Remove the task card from the current column
                            taskCard.fadeOut(300, function() {
                                $(this).remove();
                                // Reload the page to show the updated board
                                location.reload();
                            });
                        } else {
                            // Show error message with SweetAlert
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.message,
                                confirmButtonColor: '#3085d6'
                            });
                            taskCard.removeClass('bg-light');
                        }
                    },
                    error: function() {
                        // Show error message with SweetAlert
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while changing the task status.',
                            confirmButtonColor: '#3085d6'
                        });
                        taskCard.removeClass('bg-light');
                    }
                });
            });

            // Handle Create Task button click
            $('#createTaskBtn').on('click', function(e) {
                e.preventDefault();
                
                // Show loading state
                $(this).prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...');
                
                $.ajax({
                    url: '@(Url.Action("CreateTask", "Board"))',
                    type: 'GET',
                    success: function(result) {
                        // Populate modal content and show it
                        $('#createTaskContent').html(result);
                        $('#createTaskModal').modal('show');
                        
                        // Reset button state
                        $('#createTaskBtn').prop('disabled', false).text('Create Task');
                        
                        // Remove any existing click handlers to prevent duplicates
                        $(document).off('click', '#saveTaskBtn');
                        
                        // Add click handler for the save button inside the modal
                        $(document).on('click', '#saveTaskBtn', function() {
                            // Get form data directly
                            var title = $('#Title').val();
                            var description = $('#Description').val();
                            var projectId = $('#ProjectId').val();
                            var workType = $('#WorkType').val();
                            var priority = $('#Priority').val();
                            var assigneeId = $('#AssigneeId').val();
                            var status = $('#Status').val();
                            
                            // Validate required fields
                            if (!title) {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'Required Field',
                                    text: 'Please enter a title',
                                    confirmButtonColor: '#3085d6'
                                });
                                return;
                            }
                            if (!projectId) {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'Required Field',
                                    text: 'Please select a project',
                                    confirmButtonColor: '#3085d6'
                                });
                                return;
                            }
                            if (!assigneeId) {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'Required Field',
                                    text: 'Please select an assignee',
                                    confirmButtonColor: '#3085d6'
                                });
                                return;
                            }
                            
                            // Show loading state
                            $(this).prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...');
                            
                            // Submit data directly via AJAX
                            $.ajax({
                                url: '@(Url.Action("SaveTask", "Board"))',
                                type: 'POST',
                                data: {
                                    Title: title,
                                    Description: description,
                                    ProjectId: projectId,
                                    WorkType: workType,
                                    Priority: priority,
                                    AssigneeId: assigneeId,
                                    Status: status
                                },
                                success: function(response) {
                                    if (response.success) {
                                        // Close modal
                                        $('#createTaskModal').modal('hide');
                                        
                                        // Show success message with SweetAlert
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Success',
                                            text: 'Task created successfully!',
                                            confirmButtonColor: '#3085d6'
                                        }).then((result) => {
                                            // Reload the page
                                            window.location.href = '@(Url.Action("Index", "Board"))';
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error',
                                            text: response.message,
                                            confirmButtonColor: '#3085d6'
                                        });
                                        $('#saveTaskBtn').prop('disabled', false).text('Create Task');
                                    }
                                },
                                error: function(xhr, status, error) {
                                    console.error('Error saving task:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'An error occurred while saving the task: ' + error,
                                        confirmButtonColor: '#3085d6'
                                    });
                                    $('#saveTaskBtn').prop('disabled', false).text('Create Task');
                                }
                            });
                        });
                    },
                    error: function() {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Error loading create task form. Please try again.',
                            confirmButtonColor: '#3085d6'
                        });
                        $('#createTaskBtn').prop('disabled', false).text('Create Task');
                    }
                });
            });

            // Handle Create Project button click
            $('#createProjectBtn').on('click', function(e) {
                e.preventDefault();
                
                // Show loading state
                $(this).prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...');
                
                $.ajax({
                    url: '@(Url.Action("CreateProject", "Board"))',
                    type: 'GET',
                    success: function(result) {
                        // Populate modal content and show it
                        $('#createProjectContent').html(result);
                        $('#createProjectModal').modal('show');
                        
                        // Reset button state
                        $('#createProjectBtn').prop('disabled', false).text('Create Project');
                        
                        // Remove any existing click handlers to prevent duplicates
                        $(document).off('click', '#saveProjectBtn');
                        
                        // Add click handler for the save button inside the modal
                        $(document).on('click', '#saveProjectBtn', function() {
                            // Get form data directly
                            var name = $('#Name').val();
                            var description = $('#Description').val();
                            var status = $('#Status').val();
                            
                            // Validate required fields
                            if (!name) {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'Required Field',
                                    text: 'Please enter a project name',
                                    confirmButtonColor: '#3085d6'
                                });
                                return;
                            }
                            
                            // Show loading state
                            $(this).prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...');
                            
                            // Submit data directly via AJAX
                            $.ajax({
                                url: '@(Url.Action("SaveProject", "Board"))',
                                type: 'POST',
                                data: {
                                    Name: name,
                                    Description: description,
                                    Status: status
                                },
                                success: function(response) {
                                    if (response.success) {
                                        // Close modal
                                        $('#createProjectModal').modal('hide');
                                        
                                        // Show success message with SweetAlert
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Success',
                                            text: 'Project created successfully!',
                                            confirmButtonColor: '#3085d6'
                                        }).then((result) => {
                                            // Reload the page
                                            window.location.href = '@(Url.Action("Index", "Board"))';
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error',
                                            text: response.message,
                                            confirmButtonColor: '#3085d6'
                                        });
                                        $('#saveProjectBtn').prop('disabled', false).text('Create Project');
                                    }
                                },
                                error: function(xhr, status, error) {
                                    console.error('Error saving project:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'An error occurred while saving the project: ' + error,
                                        confirmButtonColor: '#3085d6'
                                    });
                                    $('#saveProjectBtn').prop('disabled', false).text('Create Project');
                                }
                            });
                        });
                    },
                    error: function() {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Error loading create project form. Please try again.',
                            confirmButtonColor: '#3085d6'
                        });
                        $('#createProjectBtn').prop('disabled', false).text('Create Project');
                    }
                });
            });
        });
    </script>
}
